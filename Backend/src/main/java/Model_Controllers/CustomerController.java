package Model_Controllers;

import org.hibernate.annotations.Parameter;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

//import Model_Controllers.User;


@Controller    // This means that this class is a Controller
@RequestMapping(path="/customer_controller") // This means URL's start with /customer (after Application path)
public class CustomerController {
    @Autowired // This means to get the bean called customerRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private CustomerRepository customerRepository;

    @RequestMapping(value = "/customer/", method = RequestMethod.POST)
    public @ResponseBody String addNewCustomer(@RequestBody Customer customer) {
        Customer c = new Customer();
        c.setFirst_name(customer.getFirst_name());
        c.setLast_name(customer.getLast_name());
        c.setEmail(customer.getEmail());
        c.setPhone_number(customer.getPhone_number());
        customerRepository.save(c);
        return "Saved";
    }

    @RequestMapping(value = "/customer/", method = RequestMethod.GET)
    public @ResponseBody Iterable<Customer> getAllCustomers() {
        return customerRepository.findAll();
    }

    @RequestMapping(value = "/customer/{id}", method = RequestMethod.GET)
    public @ResponseBody Customer findCustomerByID(@PathVariable("id") long id) {
        return customerRepository.findOne(id);
    }

    @RequestMapping(value = "/customer/{id}", method = RequestMethod.PUT)
    public @ResponseBody String updateCustomer(@PathVariable("id") long id, @RequestBody Customer customer) {
        Customer c = customerRepository.findOne(id);
        c.setFirst_name(customer.getFirst_name());
        c.setLast_name(customer.getLast_name());
        c.setEmail(customer.getEmail());
        c.setPhone_number(customer.getPhone_number());
        customerRepository.save(c);
        return "Saved";
    }

    @RequestMapping(value = "/customer/{id}", method = RequestMethod.DELETE)
    public @ResponseBody String removeCustomer(@PathVariable("id") long id) {
        customerRepository.delete(id);
        return "Deleted";
    }

}
